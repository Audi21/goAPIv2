<?php
if(isset($_SERVER['HTTP_USER_AGENT'])) {
	http_response_code(404);
	exit;
	die();
}

    ####################################################
    #### Name: goAPI.php                            ####
    #### Type: API for dashboard php encode         ####
    #### Version: 0.9                               ####
    #### Copyright: GOAutoDial Inc. (c)             ####
    #### Written by: Jerico James Flores Milo       ####
    #### License: AGPLv2                            ####
    ####################################################

    #error_reporting(E_ALL);
    #ini_set("display_errors", "On");

    include_once('MySQLiDB.php'); 
    include_once("goDBgoautodial.php");
    include_once("licensed-conf.php");
    include_once("goDBasterisk.php");
    include_once("goDBosticket.php");
    include_once("goFunctions.php");    
    

    ####### Variables #########

    $allowed = true;
    $goCharset = "UTF-8";
    $goVersion = "4.0";
    $apiresults = array();
    $api_access_key = $config['AccessKeys'];
    $responsetype = $_REQUEST['responsetype'];
    $remote_ip = $config['APIAllowedIPs'];
            
    if (isset($_GET["goURL"])) { $goURL = $_GET["goURL"]; 
    } elseif (isset($_POST["goURL"])) { $goURL = $_POST["goURL"]; }
    
    if (isset($_GET["goUser"])) { $goUser = $_GET["goUser"];
    } elseif (isset($_POST["goUser"])) { $goUser = $_POST["goUser"]; }
    
    if (isset($_GET["goPass"])) { $goPass = $_GET["goPass"];
    } elseif (isset($_POST["goPass"])) { $goPass = $_POST["goPass"]; }
    
    if (isset($_GET["goAction"])) { $goAction = $_GET["goAction"];
    } elseif (isset($_POST["goAction"])) {  $goAction = $_POST["goAction"]; }
    
    if (isset($_GET["goAccessKey"])) { $goAccessKey = $_GET["goAccessKey"];
    } elseif (isset($_POST["goAccessKey"])) { $goAccessKey = $_POST["goAccessKey"]; }    
    
	if (isset($_GET["session_user"])) { $session_user = $_GET["session_user"];
    } elseif (isset($_POST["session_user"])) { $session_user = $_POST["session_user"]; }    
    
    $astDB = new MySQLiDB($VARDB_server, $VARDB_user, $VARDB_pass, $VARDB_database);
    $goDB = new MySQLiDB($VARDBgo_server, $VARDBgo_user, $VARDBgo_pass, $VARDBgo_database);
    $kamDB = new MySQLiDB($VARDBgokam_server, $VARDBgokam_user, $VARDBgokam_pass, $VARDBgokam_database);
    
    function encrypt_decrypt($action, $string) {
        $output = false;
        $encrypt_method = "AES-256-CBC";
        $secret_key = 'This is my secret key';
        $secret_iv = 'This is my secret iv';

        // hash
        $key = hash('sha256', $secret_key);

        // iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning
        $iv = substr(hash('sha256', $secret_iv), 0, 16);

        if( $action == 'encrypt' ) {
            $output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);
            $output = base64_encode($output);
        }
        else if( $action == 'decrypt' ){
            $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);
        }

        return $output;
    }
        
        $resultEDValue = encrypt_decrypt("decrypt", $api_access_key);
        if ($goAccessKey && $api_access_key) {
            if ($goAccessKey != $api_access_key) {
                $apiresults = array("result" => "error", "message" => "Invalid Access Key");
                $allowed = false;
            }
        } else {
                $apiallowedips = $config['APIAllowedIPs'];
                $apiallowedips = unserialize($apiallowedips);
                $allowedips = array();
                foreach ($apiallowedips as $ip) {
                    if (0 < strlen(trim($ip['ip']))) {
			$allowedips[] = $ip['ip'];
                        continue;
                    }
                }
                        $allowedips[] = "69.46.6.35";
                if (!in_array($remote_ip, $allowedips)) {
                    $apiresults = array("result" => "error", "message" => "Isnvalid IP " . $remote_ip);
                    $allowed = false;
                } 
        }
        if($allowed) {
            if( is_null($goUser) || is_null($goPass) ) { 
                $apiresults = array( "result" => "error", "message" => "Username/Password is required" );
            } elseif( is_null($goAccessKey) ) {
                $apiresults = array( "result" => "error", "message" => "Access key is required" );
            } else {
                #### check credentials ####
                $query_user = "SELECT user,pass FROM vicidial_users WHERE user='$goUser' AND pass='$goPass' LIMIT 1";
                $rslt = mysqli_query($link,$query_user);
                $dataCredentials = mysqli_fetch_assoc($rslt);
                $check_result = mysqli_num_rows($rslt);
                $rsltDataUser = $dataCredentials["user"];
                if ($check_result > 0) {
                    if (file_exists($goAction . ".php" )) {
                        include_once($goAction . ".php");
                    } else {
                        $apiresults = array( "result" => "error", "message" => "Command Not Found" );
                    }
                } else {
                    ### check login attempt 
                    $queryCheckLogin = "SELECT failed_login_count FROM vicidial_users WHERE user='$goUser' LIMIT 1";
                    $rsltCheckLogin = mysqli_query($link,$queryCheckLogin);
                    $dataCheckLogin = mysqli_fetch_assoc($rsltCheckLogin);
                    $checkLoginResult = mysqli_num_rows($rsltCheckLogin);
                    $loginAttempt = $dataCheckLogin["failed_login_count"]+1;
                        if ($loginAttempt >= 6) {
                            $apiresults = array( "result" => "error", "message" => "5 Invalid API Login Attempts" );
                        } else {
                            $queryUpdateLoginAttempt = "UPDATE vicidial_users SET failed_login_count = failed_login_count +1 WHERE user='$goUser' LIMIT 1";
                            $rsltCheckLogin = mysqli_query($link,$queryUpdateLoginAttempt);
                            $apiresults = array( "result" => "error", "message" => "Authentication Failed $queryCheckLogin" );                
                        } 
                } 
            }
        }
        
        $userresponsetype = $_REQUEST["responsetype"];
        
        if (( $userresponsetype != $responsetype && ( $userresponsetype != "xml" && $userresponsetype != "json" ) )) {
            $userresponsetype = "xml";
        }
        
        #### API OUTPUT ####
        ob_start();
        
        if (count( $apiresults )) {
            if ($userresponsetype == "json") {
                $apiresults = json_encode( $apiresults );
                echo $apiresults;
                exit();
            } else {
                if ($userresponsetype == "xml") {
                    echo "<?xml version=\"1.0\" encoding=\"" . $goCharset . "\"?>\n<goautodialapi version=\"" . $goVersion . ( "\">\n<action>" . $goAction . "</action>\n" );
                    apiXMLOutput( $apiresults );
                    echo "</goautodialapi>";
                } else {
                    if ($responsetype) {
                        exit( "result=error;message=This API function can only return XML response format;" );
                    }
                    foreach ($apiresults as $k => $v) {
                        echo "" . $k . "=" . $v . ";";
                    }
                }
            }
        }
        
        $apioutput = ob_get_contents();
        ob_end_clean();
        echo $apioutput;

    
?>
